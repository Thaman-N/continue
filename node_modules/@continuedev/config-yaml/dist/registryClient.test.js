import * as fs from "node:fs";
import * as http from "node:http";
import * as os from "node:os";
import * as path from "node:path";
import { pathToFileURL } from "url";
import { RegistryClient } from "./registryClient.js";
describe("RegistryClient", () => {
    // Create a temp directory for test files
    let tempDir;
    // Setup a test server
    let server;
    let apiBaseUrl;
    beforeAll(async () => {
        // Create a temporary directory for test files
        tempDir = fs.mkdtempSync(path.join(os.tmpdir(), "registry-client-test-"));
        // Create a simple HTTP server for API testing
        server = http.createServer((req, res) => {
            if (req.url?.startsWith("/registry/v1/")) {
                const authHeader = req.headers.authorization;
                const data = {
                    content: authHeader
                        ? `auth content for ${req.url}`
                        : `content for ${req.url}`,
                };
                res.writeHead(200, { "Content-Type": "application/json" });
                res.end(JSON.stringify(data));
            }
            else {
                res.writeHead(404);
                res.end();
            }
        });
        // Start server on a random port
        await new Promise((resolve) => {
            server.listen(0, "localhost", () => resolve());
        });
        const address = server.address();
        apiBaseUrl = `http://localhost:${address.port}`;
    });
    afterAll(async () => {
        // Clean up temp directory
        fs.rmSync(tempDir, { recursive: true, force: true });
        // Close the test server
        await new Promise((resolve) => {
            server.close(() => resolve());
        });
    });
    describe("constructor", () => {
        it("should use default apiBase if not provided", () => {
            const client = new RegistryClient();
            expect(client.apiBase).toBe("https://api.continue.dev/");
        });
        it("should append trailing slash to apiBase if missing", () => {
            const client = new RegistryClient({ apiBase: "https://example.com" });
            expect(client.apiBase).toBe("https://example.com/");
        });
        it("should keep trailing slash if apiBase already has one", () => {
            const client = new RegistryClient({ apiBase: "https://example.com/" });
            expect(client.apiBase).toBe("https://example.com/");
        });
        it("should store the accessToken if provided", () => {
            const client = new RegistryClient({ accessToken: "test-token" });
            expect(client.accessToken).toBe("test-token");
        });
        it("should store the rootPath if provided", () => {
            const client = new RegistryClient({ rootPath: "/test-path" });
            expect(client.rootPath).toBe("/test-path");
        });
    });
    describe("getContent", () => {
        let testFilePath;
        beforeEach(() => {
            // Create a test file for each test
            testFilePath = path.join(tempDir, "test-file.yaml");
            fs.writeFileSync(testFilePath, "file content", "utf8");
        });
        it("should get content from file path for file uriType", async () => {
            const client = new RegistryClient();
            const id = {
                uriType: "file",
                filePath: testFilePath,
            };
            const result = await client.getContent(id);
            expect(result).toBe("file content");
        });
        it("should get content from slug for slug uriType", async () => {
            const client = new RegistryClient({
                apiBase: apiBaseUrl,
            });
            const id = {
                uriType: "slug",
                fullSlug: {
                    ownerSlug: "owner",
                    packageSlug: "package",
                    versionSlug: "1.0.0",
                },
            };
            const result = await client.getContent(id);
            expect(result).toBe("content for /registry/v1/owner/package/1.0.0");
        });
        it("should throw error for unknown uriType", async () => {
            const client = new RegistryClient();
            const id = {
                uriType: "unknown",
            };
            await expect(client.getContent(id)).rejects.toThrow("Unknown package identifier type: unknown");
        });
    });
    describe("getContentFromFilePath", () => {
        let absoluteFilePath;
        let fileUrl;
        let relativeFilePath;
        beforeEach(() => {
            // Create test files
            absoluteFilePath = path.join(tempDir, "absolute-path.yaml");
            fs.writeFileSync(absoluteFilePath, "absolute file content", "utf8");
            const urlFilePath = path.join(tempDir, "file-url-path.yaml");
            fs.writeFileSync(urlFilePath, "file:// file content", "utf8");
            const url = pathToFileURL(urlFilePath);
            fileUrl = url.toString();
            // Create a subdirectory and file in the temp directory
            const subDir = path.join(tempDir, "sub");
            fs.mkdirSync(subDir, { recursive: true });
            relativeFilePath = "sub/relative-path.yaml";
            fs.writeFileSync(path.join(tempDir, relativeFilePath), "relative file content", "utf8");
        });
        it("should read from absolute path directly", () => {
            const client = new RegistryClient();
            const result = client.getContentFromFilePath(absoluteFilePath);
            expect(result).toBe("absolute file content");
        });
        it("should read from local file url directly", () => {
            const client = new RegistryClient();
            const result = client.getContentFromFilePath(fileUrl);
            expect(result).toBe("file:// file content");
        });
        it("should use rootPath for relative paths when provided", () => {
            const client = new RegistryClient({ rootPath: tempDir });
            const result = client.getContentFromFilePath(relativeFilePath);
            expect(result).toBe("relative file content");
        });
        it("should throw error for relative path without rootPath", () => {
            const client = new RegistryClient();
            expect(() => {
                client.getContentFromFilePath("relative/path.yaml");
            }).toThrow("No rootPath provided for relative file path");
        });
    });
    describe("getContentFromSlug", () => {
        it("should fetch content from API without auth token", async () => {
            const client = new RegistryClient({
                apiBase: apiBaseUrl,
            });
            const result = await client.getContentFromSlug({
                ownerSlug: "owner",
                packageSlug: "package",
                versionSlug: "1.0.0",
            });
            expect(result).toBe("content for /registry/v1/owner/package/1.0.0");
        });
        it("should include auth token in request when provided", async () => {
            const client = new RegistryClient({
                apiBase: apiBaseUrl,
                accessToken: "test-token",
            });
            const result = await client.getContentFromSlug({
                ownerSlug: "owner",
                packageSlug: "package",
                versionSlug: "1.0.0",
            });
            expect(result).toBe("auth content for /registry/v1/owner/package/1.0.0");
        });
    });
});
//# sourceMappingURL=registryClient.test.js.map