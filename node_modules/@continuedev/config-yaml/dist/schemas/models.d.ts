import { z } from "zod";
export declare const clientCertificateOptionsSchema: z.ZodObject<{
    cert: z.ZodString;
    key: z.ZodString;
    passphrase: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    cert: string;
    key: string;
    passphrase?: string | undefined;
}, {
    cert: string;
    key: string;
    passphrase?: string | undefined;
}>;
export type ClientCertificateOptions = z.infer<typeof clientCertificateOptionsSchema>;
export declare const requestOptionsSchema: z.ZodObject<{
    timeout: z.ZodOptional<z.ZodNumber>;
    verifySsl: z.ZodOptional<z.ZodBoolean>;
    caBundlePath: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    proxy: z.ZodOptional<z.ZodString>;
    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    extraBodyProperties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    clientCertificate: z.ZodOptional<z.ZodObject<{
        cert: z.ZodString;
        key: z.ZodString;
        passphrase: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        cert: string;
        key: string;
        passphrase?: string | undefined;
    }, {
        cert: string;
        key: string;
        passphrase?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    timeout?: number | undefined;
    verifySsl?: boolean | undefined;
    caBundlePath?: string | string[] | undefined;
    proxy?: string | undefined;
    headers?: Record<string, string> | undefined;
    extraBodyProperties?: Record<string, any> | undefined;
    noProxy?: string[] | undefined;
    clientCertificate?: {
        cert: string;
        key: string;
        passphrase?: string | undefined;
    } | undefined;
}, {
    timeout?: number | undefined;
    verifySsl?: boolean | undefined;
    caBundlePath?: string | string[] | undefined;
    proxy?: string | undefined;
    headers?: Record<string, string> | undefined;
    extraBodyProperties?: Record<string, any> | undefined;
    noProxy?: string[] | undefined;
    clientCertificate?: {
        cert: string;
        key: string;
        passphrase?: string | undefined;
    } | undefined;
}>;
export type RequestOptions = z.infer<typeof requestOptionsSchema>;
export declare const modelRolesSchema: z.ZodEnum<["chat", "autocomplete", "embed", "rerank", "edit", "apply", "summarize"]>;
export type ModelRole = z.infer<typeof modelRolesSchema>;
export declare const modelCapabilitySchema: z.ZodUnion<[z.ZodLiteral<"tool_use">, z.ZodLiteral<"image_input">]>;
export type ModelCapability = z.infer<typeof modelCapabilitySchema>;
export declare const completionOptionsSchema: z.ZodObject<{
    contextLength: z.ZodOptional<z.ZodNumber>;
    maxTokens: z.ZodOptional<z.ZodNumber>;
    temperature: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    minP: z.ZodOptional<z.ZodNumber>;
    presencePenalty: z.ZodOptional<z.ZodNumber>;
    frequencyPenalty: z.ZodOptional<z.ZodNumber>;
    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    n: z.ZodOptional<z.ZodNumber>;
    reasoning: z.ZodOptional<z.ZodBoolean>;
    reasoningBudgetTokens: z.ZodOptional<z.ZodNumber>;
    promptCaching: z.ZodOptional<z.ZodBoolean>;
    stream: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    contextLength?: number | undefined;
    maxTokens?: number | undefined;
    temperature?: number | undefined;
    topP?: number | undefined;
    topK?: number | undefined;
    minP?: number | undefined;
    presencePenalty?: number | undefined;
    frequencyPenalty?: number | undefined;
    stop?: string[] | undefined;
    n?: number | undefined;
    reasoning?: boolean | undefined;
    reasoningBudgetTokens?: number | undefined;
    promptCaching?: boolean | undefined;
    stream?: boolean | undefined;
}, {
    contextLength?: number | undefined;
    maxTokens?: number | undefined;
    temperature?: number | undefined;
    topP?: number | undefined;
    topK?: number | undefined;
    minP?: number | undefined;
    presencePenalty?: number | undefined;
    frequencyPenalty?: number | undefined;
    stop?: string[] | undefined;
    n?: number | undefined;
    reasoning?: boolean | undefined;
    reasoningBudgetTokens?: number | undefined;
    promptCaching?: boolean | undefined;
    stream?: boolean | undefined;
}>;
export type CompletionOptions = z.infer<typeof completionOptionsSchema>;
export declare const embeddingTasksSchema: z.ZodUnion<[z.ZodLiteral<"chunk">, z.ZodLiteral<"query">]>;
export type EmbeddingTasks = z.infer<typeof embeddingTasksSchema>;
export declare const embeddingPrefixesSchema: z.ZodRecord<z.ZodUnion<[z.ZodLiteral<"chunk">, z.ZodLiteral<"query">]>, z.ZodString>;
export type EmbeddingPrefixes = z.infer<typeof embeddingPrefixesSchema>;
export declare const cacheBehaviorSchema: z.ZodObject<{
    cacheSystemMessage: z.ZodOptional<z.ZodBoolean>;
    cacheConversation: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    cacheSystemMessage?: boolean | undefined;
    cacheConversation?: boolean | undefined;
}, {
    cacheSystemMessage?: boolean | undefined;
    cacheConversation?: boolean | undefined;
}>;
export type CacheBehavior = z.infer<typeof cacheBehaviorSchema>;
export declare const embedOptionsSchema: z.ZodObject<{
    maxChunkSize: z.ZodOptional<z.ZodNumber>;
    maxBatchSize: z.ZodOptional<z.ZodNumber>;
    embeddingPrefixes: z.ZodOptional<z.ZodRecord<z.ZodUnion<[z.ZodLiteral<"chunk">, z.ZodLiteral<"query">]>, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    maxChunkSize?: number | undefined;
    maxBatchSize?: number | undefined;
    embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
}, {
    maxChunkSize?: number | undefined;
    maxBatchSize?: number | undefined;
    embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
}>;
export type EmbedOptions = z.infer<typeof embedOptionsSchema>;
export declare const chatOptionsSchema: z.ZodObject<{
    baseSystemMessage: z.ZodOptional<z.ZodString>;
    baseAgentSystemMessage: z.ZodOptional<z.ZodString>;
    basePlanSystemMessage: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    baseSystemMessage?: string | undefined;
    baseAgentSystemMessage?: string | undefined;
    basePlanSystemMessage?: string | undefined;
}, {
    baseSystemMessage?: string | undefined;
    baseAgentSystemMessage?: string | undefined;
    basePlanSystemMessage?: string | undefined;
}>;
export type ChatOptions = z.infer<typeof chatOptionsSchema>;
export declare const autocompleteOptionsSchema: z.ZodObject<{
    disable: z.ZodOptional<z.ZodBoolean>;
    maxPromptTokens: z.ZodOptional<z.ZodNumber>;
    debounceDelay: z.ZodOptional<z.ZodNumber>;
    modelTimeout: z.ZodOptional<z.ZodNumber>;
    maxSuffixPercentage: z.ZodOptional<z.ZodNumber>;
    prefixPercentage: z.ZodOptional<z.ZodNumber>;
    template: z.ZodOptional<z.ZodString>;
    onlyMyCode: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    disable?: boolean | undefined;
    maxPromptTokens?: number | undefined;
    debounceDelay?: number | undefined;
    modelTimeout?: number | undefined;
    maxSuffixPercentage?: number | undefined;
    prefixPercentage?: number | undefined;
    template?: string | undefined;
    onlyMyCode?: boolean | undefined;
}, {
    disable?: boolean | undefined;
    maxPromptTokens?: number | undefined;
    debounceDelay?: number | undefined;
    modelTimeout?: number | undefined;
    maxSuffixPercentage?: number | undefined;
    prefixPercentage?: number | undefined;
    template?: string | undefined;
    onlyMyCode?: boolean | undefined;
}>;
/** Prompt templates use Handlebars syntax */
declare const promptTemplatesSchema: z.ZodObject<{
    apply: z.ZodOptional<z.ZodString>;
    chat: z.ZodOptional<z.ZodEnum<["llama2", "alpaca", "zephyr", "phi2", "phind", "anthropic", "chatml", "none", "openchat", "deepseek", "xwin-coder", "neural-chat", "codellama-70b", "llava", "gemma", "granite", "llama3", "codestral"]>>;
    edit: z.ZodOptional<z.ZodString>;
    autocomplete: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
    autocomplete?: string | undefined;
    edit?: string | undefined;
    apply?: string | undefined;
}, {
    chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
    autocomplete?: string | undefined;
    edit?: string | undefined;
    apply?: string | undefined;
}>;
export type PromptTemplates = z.infer<typeof promptTemplatesSchema>;
export declare const modelSchema: z.ZodUnion<[z.ZodObject<{
    provider: z.ZodLiteral<"continue-proxy">;
    apiKeyLocation: z.ZodOptional<z.ZodString>;
    envSecretLocations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    orgScopeId: z.ZodNullable<z.ZodString>;
    onPremProxyUrl: z.ZodNullable<z.ZodString>;
    name: z.ZodString;
    model: z.ZodString;
    apiKey: z.ZodOptional<z.ZodString>;
    apiBase: z.ZodOptional<z.ZodString>;
    maxStopWords: z.ZodOptional<z.ZodNumber>;
    roles: z.ZodOptional<z.ZodArray<z.ZodEnum<["chat", "autocomplete", "embed", "rerank", "edit", "apply", "summarize"]>, "many">>;
    capabilities: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLiteral<"tool_use">, z.ZodLiteral<"image_input">]>, "many">>;
    defaultCompletionOptions: z.ZodOptional<z.ZodObject<{
        contextLength: z.ZodOptional<z.ZodNumber>;
        maxTokens: z.ZodOptional<z.ZodNumber>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        minP: z.ZodOptional<z.ZodNumber>;
        presencePenalty: z.ZodOptional<z.ZodNumber>;
        frequencyPenalty: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        n: z.ZodOptional<z.ZodNumber>;
        reasoning: z.ZodOptional<z.ZodBoolean>;
        reasoningBudgetTokens: z.ZodOptional<z.ZodNumber>;
        promptCaching: z.ZodOptional<z.ZodBoolean>;
        stream: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    }, {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    }>>;
    cacheBehavior: z.ZodOptional<z.ZodObject<{
        cacheSystemMessage: z.ZodOptional<z.ZodBoolean>;
        cacheConversation: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        cacheSystemMessage?: boolean | undefined;
        cacheConversation?: boolean | undefined;
    }, {
        cacheSystemMessage?: boolean | undefined;
        cacheConversation?: boolean | undefined;
    }>>;
    requestOptions: z.ZodOptional<z.ZodObject<{
        timeout: z.ZodOptional<z.ZodNumber>;
        verifySsl: z.ZodOptional<z.ZodBoolean>;
        caBundlePath: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        proxy: z.ZodOptional<z.ZodString>;
        headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        extraBodyProperties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        clientCertificate: z.ZodOptional<z.ZodObject<{
            cert: z.ZodString;
            key: z.ZodString;
            passphrase: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        }, {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    }, {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    }>>;
    embedOptions: z.ZodOptional<z.ZodObject<{
        maxChunkSize: z.ZodOptional<z.ZodNumber>;
        maxBatchSize: z.ZodOptional<z.ZodNumber>;
        embeddingPrefixes: z.ZodOptional<z.ZodRecord<z.ZodUnion<[z.ZodLiteral<"chunk">, z.ZodLiteral<"query">]>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        maxChunkSize?: number | undefined;
        maxBatchSize?: number | undefined;
        embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
    }, {
        maxChunkSize?: number | undefined;
        maxBatchSize?: number | undefined;
        embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
    }>>;
    chatOptions: z.ZodOptional<z.ZodObject<{
        baseSystemMessage: z.ZodOptional<z.ZodString>;
        baseAgentSystemMessage: z.ZodOptional<z.ZodString>;
        basePlanSystemMessage: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        baseSystemMessage?: string | undefined;
        baseAgentSystemMessage?: string | undefined;
        basePlanSystemMessage?: string | undefined;
    }, {
        baseSystemMessage?: string | undefined;
        baseAgentSystemMessage?: string | undefined;
        basePlanSystemMessage?: string | undefined;
    }>>;
    promptTemplates: z.ZodOptional<z.ZodObject<{
        apply: z.ZodOptional<z.ZodString>;
        chat: z.ZodOptional<z.ZodEnum<["llama2", "alpaca", "zephyr", "phi2", "phind", "anthropic", "chatml", "none", "openchat", "deepseek", "xwin-coder", "neural-chat", "codellama-70b", "llava", "gemma", "granite", "llama3", "codestral"]>>;
        edit: z.ZodOptional<z.ZodString>;
        autocomplete: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
        autocomplete?: string | undefined;
        edit?: string | undefined;
        apply?: string | undefined;
    }, {
        chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
        autocomplete?: string | undefined;
        edit?: string | undefined;
        apply?: string | undefined;
    }>>;
    useLegacyCompletionsEndpoint: z.ZodOptional<z.ZodBoolean>;
    env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNumber]>>>;
    autocompleteOptions: z.ZodOptional<z.ZodObject<{
        disable: z.ZodOptional<z.ZodBoolean>;
        maxPromptTokens: z.ZodOptional<z.ZodNumber>;
        debounceDelay: z.ZodOptional<z.ZodNumber>;
        modelTimeout: z.ZodOptional<z.ZodNumber>;
        maxSuffixPercentage: z.ZodOptional<z.ZodNumber>;
        prefixPercentage: z.ZodOptional<z.ZodNumber>;
        template: z.ZodOptional<z.ZodString>;
        onlyMyCode: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        disable?: boolean | undefined;
        maxPromptTokens?: number | undefined;
        debounceDelay?: number | undefined;
        modelTimeout?: number | undefined;
        maxSuffixPercentage?: number | undefined;
        prefixPercentage?: number | undefined;
        template?: string | undefined;
        onlyMyCode?: boolean | undefined;
    }, {
        disable?: boolean | undefined;
        maxPromptTokens?: number | undefined;
        debounceDelay?: number | undefined;
        modelTimeout?: number | undefined;
        maxSuffixPercentage?: number | undefined;
        prefixPercentage?: number | undefined;
        template?: string | undefined;
        onlyMyCode?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    provider: "continue-proxy";
    orgScopeId: string | null;
    onPremProxyUrl: string | null;
    name: string;
    model: string;
    apiKeyLocation?: string | undefined;
    envSecretLocations?: Record<string, string> | undefined;
    apiKey?: string | undefined;
    apiBase?: string | undefined;
    maxStopWords?: number | undefined;
    roles?: ("chat" | "autocomplete" | "embed" | "rerank" | "edit" | "apply" | "summarize")[] | undefined;
    capabilities?: ("tool_use" | "image_input")[] | undefined;
    defaultCompletionOptions?: {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    cacheBehavior?: {
        cacheSystemMessage?: boolean | undefined;
        cacheConversation?: boolean | undefined;
    } | undefined;
    requestOptions?: {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    } | undefined;
    embedOptions?: {
        maxChunkSize?: number | undefined;
        maxBatchSize?: number | undefined;
        embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
    } | undefined;
    chatOptions?: {
        baseSystemMessage?: string | undefined;
        baseAgentSystemMessage?: string | undefined;
        basePlanSystemMessage?: string | undefined;
    } | undefined;
    promptTemplates?: {
        chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
        autocomplete?: string | undefined;
        edit?: string | undefined;
        apply?: string | undefined;
    } | undefined;
    useLegacyCompletionsEndpoint?: boolean | undefined;
    env?: Record<string, string | number | boolean> | undefined;
    autocompleteOptions?: {
        disable?: boolean | undefined;
        maxPromptTokens?: number | undefined;
        debounceDelay?: number | undefined;
        modelTimeout?: number | undefined;
        maxSuffixPercentage?: number | undefined;
        prefixPercentage?: number | undefined;
        template?: string | undefined;
        onlyMyCode?: boolean | undefined;
    } | undefined;
}, {
    provider: "continue-proxy";
    orgScopeId: string | null;
    onPremProxyUrl: string | null;
    name: string;
    model: string;
    apiKeyLocation?: string | undefined;
    envSecretLocations?: Record<string, string> | undefined;
    apiKey?: string | undefined;
    apiBase?: string | undefined;
    maxStopWords?: number | undefined;
    roles?: ("chat" | "autocomplete" | "embed" | "rerank" | "edit" | "apply" | "summarize")[] | undefined;
    capabilities?: ("tool_use" | "image_input")[] | undefined;
    defaultCompletionOptions?: {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    cacheBehavior?: {
        cacheSystemMessage?: boolean | undefined;
        cacheConversation?: boolean | undefined;
    } | undefined;
    requestOptions?: {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    } | undefined;
    embedOptions?: {
        maxChunkSize?: number | undefined;
        maxBatchSize?: number | undefined;
        embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
    } | undefined;
    chatOptions?: {
        baseSystemMessage?: string | undefined;
        baseAgentSystemMessage?: string | undefined;
        basePlanSystemMessage?: string | undefined;
    } | undefined;
    promptTemplates?: {
        chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
        autocomplete?: string | undefined;
        edit?: string | undefined;
        apply?: string | undefined;
    } | undefined;
    useLegacyCompletionsEndpoint?: boolean | undefined;
    env?: Record<string, string | number | boolean> | undefined;
    autocompleteOptions?: {
        disable?: boolean | undefined;
        maxPromptTokens?: number | undefined;
        debounceDelay?: number | undefined;
        modelTimeout?: number | undefined;
        maxSuffixPercentage?: number | undefined;
        prefixPercentage?: number | undefined;
        template?: string | undefined;
        onlyMyCode?: boolean | undefined;
    } | undefined;
}>, z.ZodObject<{
    provider: z.ZodEffects<z.ZodString, string, string>;
    name: z.ZodString;
    model: z.ZodString;
    apiKey: z.ZodOptional<z.ZodString>;
    apiBase: z.ZodOptional<z.ZodString>;
    maxStopWords: z.ZodOptional<z.ZodNumber>;
    roles: z.ZodOptional<z.ZodArray<z.ZodEnum<["chat", "autocomplete", "embed", "rerank", "edit", "apply", "summarize"]>, "many">>;
    capabilities: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLiteral<"tool_use">, z.ZodLiteral<"image_input">]>, "many">>;
    defaultCompletionOptions: z.ZodOptional<z.ZodObject<{
        contextLength: z.ZodOptional<z.ZodNumber>;
        maxTokens: z.ZodOptional<z.ZodNumber>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        minP: z.ZodOptional<z.ZodNumber>;
        presencePenalty: z.ZodOptional<z.ZodNumber>;
        frequencyPenalty: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        n: z.ZodOptional<z.ZodNumber>;
        reasoning: z.ZodOptional<z.ZodBoolean>;
        reasoningBudgetTokens: z.ZodOptional<z.ZodNumber>;
        promptCaching: z.ZodOptional<z.ZodBoolean>;
        stream: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    }, {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    }>>;
    cacheBehavior: z.ZodOptional<z.ZodObject<{
        cacheSystemMessage: z.ZodOptional<z.ZodBoolean>;
        cacheConversation: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        cacheSystemMessage?: boolean | undefined;
        cacheConversation?: boolean | undefined;
    }, {
        cacheSystemMessage?: boolean | undefined;
        cacheConversation?: boolean | undefined;
    }>>;
    requestOptions: z.ZodOptional<z.ZodObject<{
        timeout: z.ZodOptional<z.ZodNumber>;
        verifySsl: z.ZodOptional<z.ZodBoolean>;
        caBundlePath: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        proxy: z.ZodOptional<z.ZodString>;
        headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        extraBodyProperties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        clientCertificate: z.ZodOptional<z.ZodObject<{
            cert: z.ZodString;
            key: z.ZodString;
            passphrase: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        }, {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    }, {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    }>>;
    embedOptions: z.ZodOptional<z.ZodObject<{
        maxChunkSize: z.ZodOptional<z.ZodNumber>;
        maxBatchSize: z.ZodOptional<z.ZodNumber>;
        embeddingPrefixes: z.ZodOptional<z.ZodRecord<z.ZodUnion<[z.ZodLiteral<"chunk">, z.ZodLiteral<"query">]>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        maxChunkSize?: number | undefined;
        maxBatchSize?: number | undefined;
        embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
    }, {
        maxChunkSize?: number | undefined;
        maxBatchSize?: number | undefined;
        embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
    }>>;
    chatOptions: z.ZodOptional<z.ZodObject<{
        baseSystemMessage: z.ZodOptional<z.ZodString>;
        baseAgentSystemMessage: z.ZodOptional<z.ZodString>;
        basePlanSystemMessage: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        baseSystemMessage?: string | undefined;
        baseAgentSystemMessage?: string | undefined;
        basePlanSystemMessage?: string | undefined;
    }, {
        baseSystemMessage?: string | undefined;
        baseAgentSystemMessage?: string | undefined;
        basePlanSystemMessage?: string | undefined;
    }>>;
    promptTemplates: z.ZodOptional<z.ZodObject<{
        apply: z.ZodOptional<z.ZodString>;
        chat: z.ZodOptional<z.ZodEnum<["llama2", "alpaca", "zephyr", "phi2", "phind", "anthropic", "chatml", "none", "openchat", "deepseek", "xwin-coder", "neural-chat", "codellama-70b", "llava", "gemma", "granite", "llama3", "codestral"]>>;
        edit: z.ZodOptional<z.ZodString>;
        autocomplete: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
        autocomplete?: string | undefined;
        edit?: string | undefined;
        apply?: string | undefined;
    }, {
        chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
        autocomplete?: string | undefined;
        edit?: string | undefined;
        apply?: string | undefined;
    }>>;
    useLegacyCompletionsEndpoint: z.ZodOptional<z.ZodBoolean>;
    env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNumber]>>>;
    autocompleteOptions: z.ZodOptional<z.ZodObject<{
        disable: z.ZodOptional<z.ZodBoolean>;
        maxPromptTokens: z.ZodOptional<z.ZodNumber>;
        debounceDelay: z.ZodOptional<z.ZodNumber>;
        modelTimeout: z.ZodOptional<z.ZodNumber>;
        maxSuffixPercentage: z.ZodOptional<z.ZodNumber>;
        prefixPercentage: z.ZodOptional<z.ZodNumber>;
        template: z.ZodOptional<z.ZodString>;
        onlyMyCode: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        disable?: boolean | undefined;
        maxPromptTokens?: number | undefined;
        debounceDelay?: number | undefined;
        modelTimeout?: number | undefined;
        maxSuffixPercentage?: number | undefined;
        prefixPercentage?: number | undefined;
        template?: string | undefined;
        onlyMyCode?: boolean | undefined;
    }, {
        disable?: boolean | undefined;
        maxPromptTokens?: number | undefined;
        debounceDelay?: number | undefined;
        modelTimeout?: number | undefined;
        maxSuffixPercentage?: number | undefined;
        prefixPercentage?: number | undefined;
        template?: string | undefined;
        onlyMyCode?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    provider: string;
    name: string;
    model: string;
    apiKey?: string | undefined;
    apiBase?: string | undefined;
    maxStopWords?: number | undefined;
    roles?: ("chat" | "autocomplete" | "embed" | "rerank" | "edit" | "apply" | "summarize")[] | undefined;
    capabilities?: ("tool_use" | "image_input")[] | undefined;
    defaultCompletionOptions?: {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    cacheBehavior?: {
        cacheSystemMessage?: boolean | undefined;
        cacheConversation?: boolean | undefined;
    } | undefined;
    requestOptions?: {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    } | undefined;
    embedOptions?: {
        maxChunkSize?: number | undefined;
        maxBatchSize?: number | undefined;
        embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
    } | undefined;
    chatOptions?: {
        baseSystemMessage?: string | undefined;
        baseAgentSystemMessage?: string | undefined;
        basePlanSystemMessage?: string | undefined;
    } | undefined;
    promptTemplates?: {
        chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
        autocomplete?: string | undefined;
        edit?: string | undefined;
        apply?: string | undefined;
    } | undefined;
    useLegacyCompletionsEndpoint?: boolean | undefined;
    env?: Record<string, string | number | boolean> | undefined;
    autocompleteOptions?: {
        disable?: boolean | undefined;
        maxPromptTokens?: number | undefined;
        debounceDelay?: number | undefined;
        modelTimeout?: number | undefined;
        maxSuffixPercentage?: number | undefined;
        prefixPercentage?: number | undefined;
        template?: string | undefined;
        onlyMyCode?: boolean | undefined;
    } | undefined;
}, {
    provider: string;
    name: string;
    model: string;
    apiKey?: string | undefined;
    apiBase?: string | undefined;
    maxStopWords?: number | undefined;
    roles?: ("chat" | "autocomplete" | "embed" | "rerank" | "edit" | "apply" | "summarize")[] | undefined;
    capabilities?: ("tool_use" | "image_input")[] | undefined;
    defaultCompletionOptions?: {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    cacheBehavior?: {
        cacheSystemMessage?: boolean | undefined;
        cacheConversation?: boolean | undefined;
    } | undefined;
    requestOptions?: {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    } | undefined;
    embedOptions?: {
        maxChunkSize?: number | undefined;
        maxBatchSize?: number | undefined;
        embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
    } | undefined;
    chatOptions?: {
        baseSystemMessage?: string | undefined;
        baseAgentSystemMessage?: string | undefined;
        basePlanSystemMessage?: string | undefined;
    } | undefined;
    promptTemplates?: {
        chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
        autocomplete?: string | undefined;
        edit?: string | undefined;
        apply?: string | undefined;
    } | undefined;
    useLegacyCompletionsEndpoint?: boolean | undefined;
    env?: Record<string, string | number | boolean> | undefined;
    autocompleteOptions?: {
        disable?: boolean | undefined;
        maxPromptTokens?: number | undefined;
        debounceDelay?: number | undefined;
        modelTimeout?: number | undefined;
        maxSuffixPercentage?: number | undefined;
        prefixPercentage?: number | undefined;
        template?: string | undefined;
        onlyMyCode?: boolean | undefined;
    } | undefined;
}>]>;
export declare const partialModelSchema: z.ZodUnion<[z.ZodObject<{
    provider: z.ZodOptional<z.ZodLiteral<"continue-proxy">>;
    apiKeyLocation: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    envSecretLocations: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>>;
    name: z.ZodOptional<z.ZodString>;
    model: z.ZodOptional<z.ZodString>;
    apiKey: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    apiBase: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    maxStopWords: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    roles: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodEnum<["chat", "autocomplete", "embed", "rerank", "edit", "apply", "summarize"]>, "many">>>;
    capabilities: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLiteral<"tool_use">, z.ZodLiteral<"image_input">]>, "many">>>;
    defaultCompletionOptions: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        contextLength: z.ZodOptional<z.ZodNumber>;
        maxTokens: z.ZodOptional<z.ZodNumber>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        minP: z.ZodOptional<z.ZodNumber>;
        presencePenalty: z.ZodOptional<z.ZodNumber>;
        frequencyPenalty: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        n: z.ZodOptional<z.ZodNumber>;
        reasoning: z.ZodOptional<z.ZodBoolean>;
        reasoningBudgetTokens: z.ZodOptional<z.ZodNumber>;
        promptCaching: z.ZodOptional<z.ZodBoolean>;
        stream: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    }, {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    }>>>;
    cacheBehavior: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        cacheSystemMessage: z.ZodOptional<z.ZodBoolean>;
        cacheConversation: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        cacheSystemMessage?: boolean | undefined;
        cacheConversation?: boolean | undefined;
    }, {
        cacheSystemMessage?: boolean | undefined;
        cacheConversation?: boolean | undefined;
    }>>>;
    requestOptions: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        timeout: z.ZodOptional<z.ZodNumber>;
        verifySsl: z.ZodOptional<z.ZodBoolean>;
        caBundlePath: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        proxy: z.ZodOptional<z.ZodString>;
        headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        extraBodyProperties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        clientCertificate: z.ZodOptional<z.ZodObject<{
            cert: z.ZodString;
            key: z.ZodString;
            passphrase: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        }, {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    }, {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    }>>>;
    embedOptions: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        maxChunkSize: z.ZodOptional<z.ZodNumber>;
        maxBatchSize: z.ZodOptional<z.ZodNumber>;
        embeddingPrefixes: z.ZodOptional<z.ZodRecord<z.ZodUnion<[z.ZodLiteral<"chunk">, z.ZodLiteral<"query">]>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        maxChunkSize?: number | undefined;
        maxBatchSize?: number | undefined;
        embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
    }, {
        maxChunkSize?: number | undefined;
        maxBatchSize?: number | undefined;
        embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
    }>>>;
    chatOptions: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        baseSystemMessage: z.ZodOptional<z.ZodString>;
        baseAgentSystemMessage: z.ZodOptional<z.ZodString>;
        basePlanSystemMessage: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        baseSystemMessage?: string | undefined;
        baseAgentSystemMessage?: string | undefined;
        basePlanSystemMessage?: string | undefined;
    }, {
        baseSystemMessage?: string | undefined;
        baseAgentSystemMessage?: string | undefined;
        basePlanSystemMessage?: string | undefined;
    }>>>;
    promptTemplates: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        apply: z.ZodOptional<z.ZodString>;
        chat: z.ZodOptional<z.ZodEnum<["llama2", "alpaca", "zephyr", "phi2", "phind", "anthropic", "chatml", "none", "openchat", "deepseek", "xwin-coder", "neural-chat", "codellama-70b", "llava", "gemma", "granite", "llama3", "codestral"]>>;
        edit: z.ZodOptional<z.ZodString>;
        autocomplete: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
        autocomplete?: string | undefined;
        edit?: string | undefined;
        apply?: string | undefined;
    }, {
        chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
        autocomplete?: string | undefined;
        edit?: string | undefined;
        apply?: string | undefined;
    }>>>;
    useLegacyCompletionsEndpoint: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    env: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNumber]>>>>;
    autocompleteOptions: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        disable: z.ZodOptional<z.ZodBoolean>;
        maxPromptTokens: z.ZodOptional<z.ZodNumber>;
        debounceDelay: z.ZodOptional<z.ZodNumber>;
        modelTimeout: z.ZodOptional<z.ZodNumber>;
        maxSuffixPercentage: z.ZodOptional<z.ZodNumber>;
        prefixPercentage: z.ZodOptional<z.ZodNumber>;
        template: z.ZodOptional<z.ZodString>;
        onlyMyCode: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        disable?: boolean | undefined;
        maxPromptTokens?: number | undefined;
        debounceDelay?: number | undefined;
        modelTimeout?: number | undefined;
        maxSuffixPercentage?: number | undefined;
        prefixPercentage?: number | undefined;
        template?: string | undefined;
        onlyMyCode?: boolean | undefined;
    }, {
        disable?: boolean | undefined;
        maxPromptTokens?: number | undefined;
        debounceDelay?: number | undefined;
        modelTimeout?: number | undefined;
        maxSuffixPercentage?: number | undefined;
        prefixPercentage?: number | undefined;
        template?: string | undefined;
        onlyMyCode?: boolean | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    provider?: "continue-proxy" | undefined;
    apiKeyLocation?: string | undefined;
    envSecretLocations?: Record<string, string> | undefined;
    name?: string | undefined;
    model?: string | undefined;
    apiKey?: string | undefined;
    apiBase?: string | undefined;
    maxStopWords?: number | undefined;
    roles?: ("chat" | "autocomplete" | "embed" | "rerank" | "edit" | "apply" | "summarize")[] | undefined;
    capabilities?: ("tool_use" | "image_input")[] | undefined;
    defaultCompletionOptions?: {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    cacheBehavior?: {
        cacheSystemMessage?: boolean | undefined;
        cacheConversation?: boolean | undefined;
    } | undefined;
    requestOptions?: {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    } | undefined;
    embedOptions?: {
        maxChunkSize?: number | undefined;
        maxBatchSize?: number | undefined;
        embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
    } | undefined;
    chatOptions?: {
        baseSystemMessage?: string | undefined;
        baseAgentSystemMessage?: string | undefined;
        basePlanSystemMessage?: string | undefined;
    } | undefined;
    promptTemplates?: {
        chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
        autocomplete?: string | undefined;
        edit?: string | undefined;
        apply?: string | undefined;
    } | undefined;
    useLegacyCompletionsEndpoint?: boolean | undefined;
    env?: Record<string, string | number | boolean> | undefined;
    autocompleteOptions?: {
        disable?: boolean | undefined;
        maxPromptTokens?: number | undefined;
        debounceDelay?: number | undefined;
        modelTimeout?: number | undefined;
        maxSuffixPercentage?: number | undefined;
        prefixPercentage?: number | undefined;
        template?: string | undefined;
        onlyMyCode?: boolean | undefined;
    } | undefined;
}, {
    provider?: "continue-proxy" | undefined;
    apiKeyLocation?: string | undefined;
    envSecretLocations?: Record<string, string> | undefined;
    name?: string | undefined;
    model?: string | undefined;
    apiKey?: string | undefined;
    apiBase?: string | undefined;
    maxStopWords?: number | undefined;
    roles?: ("chat" | "autocomplete" | "embed" | "rerank" | "edit" | "apply" | "summarize")[] | undefined;
    capabilities?: ("tool_use" | "image_input")[] | undefined;
    defaultCompletionOptions?: {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    cacheBehavior?: {
        cacheSystemMessage?: boolean | undefined;
        cacheConversation?: boolean | undefined;
    } | undefined;
    requestOptions?: {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    } | undefined;
    embedOptions?: {
        maxChunkSize?: number | undefined;
        maxBatchSize?: number | undefined;
        embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
    } | undefined;
    chatOptions?: {
        baseSystemMessage?: string | undefined;
        baseAgentSystemMessage?: string | undefined;
        basePlanSystemMessage?: string | undefined;
    } | undefined;
    promptTemplates?: {
        chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
        autocomplete?: string | undefined;
        edit?: string | undefined;
        apply?: string | undefined;
    } | undefined;
    useLegacyCompletionsEndpoint?: boolean | undefined;
    env?: Record<string, string | number | boolean> | undefined;
    autocompleteOptions?: {
        disable?: boolean | undefined;
        maxPromptTokens?: number | undefined;
        debounceDelay?: number | undefined;
        modelTimeout?: number | undefined;
        maxSuffixPercentage?: number | undefined;
        prefixPercentage?: number | undefined;
        template?: string | undefined;
        onlyMyCode?: boolean | undefined;
    } | undefined;
}>, z.ZodObject<{
    provider: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    name: z.ZodOptional<z.ZodString>;
    model: z.ZodOptional<z.ZodString>;
    apiKey: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    apiBase: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    maxStopWords: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    roles: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodEnum<["chat", "autocomplete", "embed", "rerank", "edit", "apply", "summarize"]>, "many">>>;
    capabilities: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLiteral<"tool_use">, z.ZodLiteral<"image_input">]>, "many">>>;
    defaultCompletionOptions: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        contextLength: z.ZodOptional<z.ZodNumber>;
        maxTokens: z.ZodOptional<z.ZodNumber>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        minP: z.ZodOptional<z.ZodNumber>;
        presencePenalty: z.ZodOptional<z.ZodNumber>;
        frequencyPenalty: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        n: z.ZodOptional<z.ZodNumber>;
        reasoning: z.ZodOptional<z.ZodBoolean>;
        reasoningBudgetTokens: z.ZodOptional<z.ZodNumber>;
        promptCaching: z.ZodOptional<z.ZodBoolean>;
        stream: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    }, {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    }>>>;
    cacheBehavior: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        cacheSystemMessage: z.ZodOptional<z.ZodBoolean>;
        cacheConversation: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        cacheSystemMessage?: boolean | undefined;
        cacheConversation?: boolean | undefined;
    }, {
        cacheSystemMessage?: boolean | undefined;
        cacheConversation?: boolean | undefined;
    }>>>;
    requestOptions: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        timeout: z.ZodOptional<z.ZodNumber>;
        verifySsl: z.ZodOptional<z.ZodBoolean>;
        caBundlePath: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        proxy: z.ZodOptional<z.ZodString>;
        headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        extraBodyProperties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        clientCertificate: z.ZodOptional<z.ZodObject<{
            cert: z.ZodString;
            key: z.ZodString;
            passphrase: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        }, {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    }, {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    }>>>;
    embedOptions: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        maxChunkSize: z.ZodOptional<z.ZodNumber>;
        maxBatchSize: z.ZodOptional<z.ZodNumber>;
        embeddingPrefixes: z.ZodOptional<z.ZodRecord<z.ZodUnion<[z.ZodLiteral<"chunk">, z.ZodLiteral<"query">]>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        maxChunkSize?: number | undefined;
        maxBatchSize?: number | undefined;
        embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
    }, {
        maxChunkSize?: number | undefined;
        maxBatchSize?: number | undefined;
        embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
    }>>>;
    chatOptions: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        baseSystemMessage: z.ZodOptional<z.ZodString>;
        baseAgentSystemMessage: z.ZodOptional<z.ZodString>;
        basePlanSystemMessage: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        baseSystemMessage?: string | undefined;
        baseAgentSystemMessage?: string | undefined;
        basePlanSystemMessage?: string | undefined;
    }, {
        baseSystemMessage?: string | undefined;
        baseAgentSystemMessage?: string | undefined;
        basePlanSystemMessage?: string | undefined;
    }>>>;
    promptTemplates: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        apply: z.ZodOptional<z.ZodString>;
        chat: z.ZodOptional<z.ZodEnum<["llama2", "alpaca", "zephyr", "phi2", "phind", "anthropic", "chatml", "none", "openchat", "deepseek", "xwin-coder", "neural-chat", "codellama-70b", "llava", "gemma", "granite", "llama3", "codestral"]>>;
        edit: z.ZodOptional<z.ZodString>;
        autocomplete: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
        autocomplete?: string | undefined;
        edit?: string | undefined;
        apply?: string | undefined;
    }, {
        chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
        autocomplete?: string | undefined;
        edit?: string | undefined;
        apply?: string | undefined;
    }>>>;
    useLegacyCompletionsEndpoint: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    env: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNumber]>>>>;
    autocompleteOptions: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        disable: z.ZodOptional<z.ZodBoolean>;
        maxPromptTokens: z.ZodOptional<z.ZodNumber>;
        debounceDelay: z.ZodOptional<z.ZodNumber>;
        modelTimeout: z.ZodOptional<z.ZodNumber>;
        maxSuffixPercentage: z.ZodOptional<z.ZodNumber>;
        prefixPercentage: z.ZodOptional<z.ZodNumber>;
        template: z.ZodOptional<z.ZodString>;
        onlyMyCode: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        disable?: boolean | undefined;
        maxPromptTokens?: number | undefined;
        debounceDelay?: number | undefined;
        modelTimeout?: number | undefined;
        maxSuffixPercentage?: number | undefined;
        prefixPercentage?: number | undefined;
        template?: string | undefined;
        onlyMyCode?: boolean | undefined;
    }, {
        disable?: boolean | undefined;
        maxPromptTokens?: number | undefined;
        debounceDelay?: number | undefined;
        modelTimeout?: number | undefined;
        maxSuffixPercentage?: number | undefined;
        prefixPercentage?: number | undefined;
        template?: string | undefined;
        onlyMyCode?: boolean | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    provider?: string | undefined;
    name?: string | undefined;
    model?: string | undefined;
    apiKey?: string | undefined;
    apiBase?: string | undefined;
    maxStopWords?: number | undefined;
    roles?: ("chat" | "autocomplete" | "embed" | "rerank" | "edit" | "apply" | "summarize")[] | undefined;
    capabilities?: ("tool_use" | "image_input")[] | undefined;
    defaultCompletionOptions?: {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    cacheBehavior?: {
        cacheSystemMessage?: boolean | undefined;
        cacheConversation?: boolean | undefined;
    } | undefined;
    requestOptions?: {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    } | undefined;
    embedOptions?: {
        maxChunkSize?: number | undefined;
        maxBatchSize?: number | undefined;
        embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
    } | undefined;
    chatOptions?: {
        baseSystemMessage?: string | undefined;
        baseAgentSystemMessage?: string | undefined;
        basePlanSystemMessage?: string | undefined;
    } | undefined;
    promptTemplates?: {
        chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
        autocomplete?: string | undefined;
        edit?: string | undefined;
        apply?: string | undefined;
    } | undefined;
    useLegacyCompletionsEndpoint?: boolean | undefined;
    env?: Record<string, string | number | boolean> | undefined;
    autocompleteOptions?: {
        disable?: boolean | undefined;
        maxPromptTokens?: number | undefined;
        debounceDelay?: number | undefined;
        modelTimeout?: number | undefined;
        maxSuffixPercentage?: number | undefined;
        prefixPercentage?: number | undefined;
        template?: string | undefined;
        onlyMyCode?: boolean | undefined;
    } | undefined;
}, {
    provider?: string | undefined;
    name?: string | undefined;
    model?: string | undefined;
    apiKey?: string | undefined;
    apiBase?: string | undefined;
    maxStopWords?: number | undefined;
    roles?: ("chat" | "autocomplete" | "embed" | "rerank" | "edit" | "apply" | "summarize")[] | undefined;
    capabilities?: ("tool_use" | "image_input")[] | undefined;
    defaultCompletionOptions?: {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    cacheBehavior?: {
        cacheSystemMessage?: boolean | undefined;
        cacheConversation?: boolean | undefined;
    } | undefined;
    requestOptions?: {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    } | undefined;
    embedOptions?: {
        maxChunkSize?: number | undefined;
        maxBatchSize?: number | undefined;
        embeddingPrefixes?: Partial<Record<"chunk" | "query", string>> | undefined;
    } | undefined;
    chatOptions?: {
        baseSystemMessage?: string | undefined;
        baseAgentSystemMessage?: string | undefined;
        basePlanSystemMessage?: string | undefined;
    } | undefined;
    promptTemplates?: {
        chat?: "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "anthropic" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "granite" | "llama3" | "codestral" | undefined;
        autocomplete?: string | undefined;
        edit?: string | undefined;
        apply?: string | undefined;
    } | undefined;
    useLegacyCompletionsEndpoint?: boolean | undefined;
    env?: Record<string, string | number | boolean> | undefined;
    autocompleteOptions?: {
        disable?: boolean | undefined;
        maxPromptTokens?: number | undefined;
        debounceDelay?: number | undefined;
        modelTimeout?: number | undefined;
        maxSuffixPercentage?: number | undefined;
        prefixPercentage?: number | undefined;
        template?: string | undefined;
        onlyMyCode?: boolean | undefined;
    } | undefined;
}>]>;
export type ModelConfig = z.infer<typeof modelSchema>;
export {};
