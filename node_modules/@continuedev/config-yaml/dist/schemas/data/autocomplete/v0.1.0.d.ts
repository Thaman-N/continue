export declare const autocompleteEventSchema_0_1_0: import("zod").ZodObject<Pick<import("zod").objectUtil.extendShape<{
    eventName: import("zod").ZodString;
    schema: import("zod").ZodString;
    timestamp: import("zod").ZodString;
    userId: import("zod").ZodString;
    userAgent: import("zod").ZodString;
    selectedProfileId: import("zod").ZodString;
}, {
    disable: import("zod").ZodBoolean;
    useFileSuffix: import("zod").ZodBoolean;
    maxPromptTokens: import("zod").ZodNumber;
    debounceDelay: import("zod").ZodNumber;
    maxSuffixPercentage: import("zod").ZodNumber;
    prefixPercentage: import("zod").ZodNumber;
    transform: import("zod").ZodOptional<import("zod").ZodBoolean>;
    template: import("zod").ZodOptional<import("zod").ZodString>;
    multilineCompletions: import("zod").ZodEnum<["always", "never", "auto"]>;
    slidingWindowPrefixPercentage: import("zod").ZodNumber;
    slidingWindowSize: import("zod").ZodNumber;
    useCache: import("zod").ZodBoolean;
    onlyMyCode: import("zod").ZodBoolean;
    useRecentlyEdited: import("zod").ZodBoolean;
    useImports: import("zod").ZodOptional<import("zod").ZodBoolean>;
    accepted: import("zod").ZodOptional<import("zod").ZodBoolean>;
    time: import("zod").ZodNumber;
    prefix: import("zod").ZodString;
    suffix: import("zod").ZodString;
    prompt: import("zod").ZodString;
    completion: import("zod").ZodString;
    modelProvider: import("zod").ZodString;
    modelName: import("zod").ZodString;
    cacheHit: import("zod").ZodBoolean;
    filepath: import("zod").ZodString;
    gitRepo: import("zod").ZodOptional<import("zod").ZodString>;
    completionId: import("zod").ZodString;
    uniqueId: import("zod").ZodString;
    timestamp: import("zod").ZodNumber;
    completionOptions: import("zod").ZodOptional<import("zod").ZodObject<{
        contextLength: import("zod").ZodOptional<import("zod").ZodNumber>;
        maxTokens: import("zod").ZodOptional<import("zod").ZodNumber>;
        temperature: import("zod").ZodOptional<import("zod").ZodNumber>;
        topP: import("zod").ZodOptional<import("zod").ZodNumber>;
        topK: import("zod").ZodOptional<import("zod").ZodNumber>;
        minP: import("zod").ZodOptional<import("zod").ZodNumber>;
        presencePenalty: import("zod").ZodOptional<import("zod").ZodNumber>;
        frequencyPenalty: import("zod").ZodOptional<import("zod").ZodNumber>;
        stop: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
        n: import("zod").ZodOptional<import("zod").ZodNumber>;
        reasoning: import("zod").ZodOptional<import("zod").ZodBoolean>;
        reasoningBudgetTokens: import("zod").ZodOptional<import("zod").ZodNumber>;
        promptCaching: import("zod").ZodOptional<import("zod").ZodBoolean>;
        stream: import("zod").ZodOptional<import("zod").ZodBoolean>;
    }, "strip", import("zod").ZodTypeAny, {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    }, {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    }>>;
    disableInFiles: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
}>, "time" | "disable" | "maxPromptTokens" | "debounceDelay" | "maxSuffixPercentage" | "prefixPercentage" | "template" | "onlyMyCode" | "timestamp" | "useFileSuffix" | "transform" | "multilineCompletions" | "slidingWindowPrefixPercentage" | "slidingWindowSize" | "useCache" | "useRecentlyEdited" | "useImports" | "accepted" | "prefix" | "suffix" | "prompt" | "completion" | "modelProvider" | "modelName" | "cacheHit" | "filepath" | "gitRepo" | "completionId" | "uniqueId" | "completionOptions" | "disableInFiles">, "strip", import("zod").ZodTypeAny, {
    time: number;
    disable: boolean;
    maxPromptTokens: number;
    debounceDelay: number;
    maxSuffixPercentage: number;
    prefixPercentage: number;
    onlyMyCode: boolean;
    timestamp: number;
    useFileSuffix: boolean;
    multilineCompletions: "never" | "always" | "auto";
    slidingWindowPrefixPercentage: number;
    slidingWindowSize: number;
    useCache: boolean;
    useRecentlyEdited: boolean;
    prefix: string;
    suffix: string;
    prompt: string;
    completion: string;
    modelProvider: string;
    modelName: string;
    cacheHit: boolean;
    filepath: string;
    completionId: string;
    uniqueId: string;
    template?: string | undefined;
    transform?: boolean | undefined;
    useImports?: boolean | undefined;
    accepted?: boolean | undefined;
    gitRepo?: string | undefined;
    completionOptions?: {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    disableInFiles?: string[] | undefined;
}, {
    time: number;
    disable: boolean;
    maxPromptTokens: number;
    debounceDelay: number;
    maxSuffixPercentage: number;
    prefixPercentage: number;
    onlyMyCode: boolean;
    timestamp: number;
    useFileSuffix: boolean;
    multilineCompletions: "never" | "always" | "auto";
    slidingWindowPrefixPercentage: number;
    slidingWindowSize: number;
    useCache: boolean;
    useRecentlyEdited: boolean;
    prefix: string;
    suffix: string;
    prompt: string;
    completion: string;
    modelProvider: string;
    modelName: string;
    cacheHit: boolean;
    filepath: string;
    completionId: string;
    uniqueId: string;
    template?: string | undefined;
    transform?: boolean | undefined;
    useImports?: boolean | undefined;
    accepted?: boolean | undefined;
    gitRepo?: string | undefined;
    completionOptions?: {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    disableInFiles?: string[] | undefined;
}>;
export declare const autocompleteEventSchema_0_1_0_noCode: import("zod").ZodObject<Omit<Pick<import("zod").objectUtil.extendShape<{
    eventName: import("zod").ZodString;
    schema: import("zod").ZodString;
    timestamp: import("zod").ZodString;
    userId: import("zod").ZodString;
    userAgent: import("zod").ZodString;
    selectedProfileId: import("zod").ZodString;
}, {
    disable: import("zod").ZodBoolean;
    useFileSuffix: import("zod").ZodBoolean;
    maxPromptTokens: import("zod").ZodNumber;
    debounceDelay: import("zod").ZodNumber;
    maxSuffixPercentage: import("zod").ZodNumber;
    prefixPercentage: import("zod").ZodNumber;
    transform: import("zod").ZodOptional<import("zod").ZodBoolean>;
    template: import("zod").ZodOptional<import("zod").ZodString>;
    multilineCompletions: import("zod").ZodEnum<["always", "never", "auto"]>;
    slidingWindowPrefixPercentage: import("zod").ZodNumber;
    slidingWindowSize: import("zod").ZodNumber;
    useCache: import("zod").ZodBoolean;
    onlyMyCode: import("zod").ZodBoolean;
    useRecentlyEdited: import("zod").ZodBoolean;
    useImports: import("zod").ZodOptional<import("zod").ZodBoolean>;
    accepted: import("zod").ZodOptional<import("zod").ZodBoolean>;
    time: import("zod").ZodNumber;
    prefix: import("zod").ZodString;
    suffix: import("zod").ZodString;
    prompt: import("zod").ZodString;
    completion: import("zod").ZodString;
    modelProvider: import("zod").ZodString;
    modelName: import("zod").ZodString;
    cacheHit: import("zod").ZodBoolean;
    filepath: import("zod").ZodString;
    gitRepo: import("zod").ZodOptional<import("zod").ZodString>;
    completionId: import("zod").ZodString;
    uniqueId: import("zod").ZodString;
    timestamp: import("zod").ZodNumber;
    completionOptions: import("zod").ZodOptional<import("zod").ZodObject<{
        contextLength: import("zod").ZodOptional<import("zod").ZodNumber>;
        maxTokens: import("zod").ZodOptional<import("zod").ZodNumber>;
        temperature: import("zod").ZodOptional<import("zod").ZodNumber>;
        topP: import("zod").ZodOptional<import("zod").ZodNumber>;
        topK: import("zod").ZodOptional<import("zod").ZodNumber>;
        minP: import("zod").ZodOptional<import("zod").ZodNumber>;
        presencePenalty: import("zod").ZodOptional<import("zod").ZodNumber>;
        frequencyPenalty: import("zod").ZodOptional<import("zod").ZodNumber>;
        stop: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
        n: import("zod").ZodOptional<import("zod").ZodNumber>;
        reasoning: import("zod").ZodOptional<import("zod").ZodBoolean>;
        reasoningBudgetTokens: import("zod").ZodOptional<import("zod").ZodNumber>;
        promptCaching: import("zod").ZodOptional<import("zod").ZodBoolean>;
        stream: import("zod").ZodOptional<import("zod").ZodBoolean>;
    }, "strip", import("zod").ZodTypeAny, {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    }, {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    }>>;
    disableInFiles: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
}>, "time" | "disable" | "maxPromptTokens" | "debounceDelay" | "maxSuffixPercentage" | "prefixPercentage" | "template" | "onlyMyCode" | "timestamp" | "useFileSuffix" | "transform" | "multilineCompletions" | "slidingWindowPrefixPercentage" | "slidingWindowSize" | "useCache" | "useRecentlyEdited" | "useImports" | "accepted" | "prefix" | "suffix" | "prompt" | "completion" | "modelProvider" | "modelName" | "cacheHit" | "filepath" | "gitRepo" | "completionId" | "uniqueId" | "completionOptions" | "disableInFiles">, "prefix" | "suffix" | "prompt" | "completion">, "strip", import("zod").ZodTypeAny, {
    time: number;
    disable: boolean;
    maxPromptTokens: number;
    debounceDelay: number;
    maxSuffixPercentage: number;
    prefixPercentage: number;
    onlyMyCode: boolean;
    timestamp: number;
    useFileSuffix: boolean;
    multilineCompletions: "never" | "always" | "auto";
    slidingWindowPrefixPercentage: number;
    slidingWindowSize: number;
    useCache: boolean;
    useRecentlyEdited: boolean;
    modelProvider: string;
    modelName: string;
    cacheHit: boolean;
    filepath: string;
    completionId: string;
    uniqueId: string;
    template?: string | undefined;
    transform?: boolean | undefined;
    useImports?: boolean | undefined;
    accepted?: boolean | undefined;
    gitRepo?: string | undefined;
    completionOptions?: {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    disableInFiles?: string[] | undefined;
}, {
    time: number;
    disable: boolean;
    maxPromptTokens: number;
    debounceDelay: number;
    maxSuffixPercentage: number;
    prefixPercentage: number;
    onlyMyCode: boolean;
    timestamp: number;
    useFileSuffix: boolean;
    multilineCompletions: "never" | "always" | "auto";
    slidingWindowPrefixPercentage: number;
    slidingWindowSize: number;
    useCache: boolean;
    useRecentlyEdited: boolean;
    modelProvider: string;
    modelName: string;
    cacheHit: boolean;
    filepath: string;
    completionId: string;
    uniqueId: string;
    template?: string | undefined;
    transform?: boolean | undefined;
    useImports?: boolean | undefined;
    accepted?: boolean | undefined;
    gitRepo?: string | undefined;
    completionOptions?: {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    disableInFiles?: string[] | undefined;
}>;
