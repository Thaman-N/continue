import { z } from "zod";
export declare const autocompleteEventAllSchema: z.ZodObject<z.objectUtil.extendShape<{
    eventName: z.ZodString;
    schema: z.ZodString;
    timestamp: z.ZodString;
    userId: z.ZodString;
    userAgent: z.ZodString;
    selectedProfileId: z.ZodString;
}, {
    disable: z.ZodBoolean;
    useFileSuffix: z.ZodBoolean;
    maxPromptTokens: z.ZodNumber;
    debounceDelay: z.ZodNumber;
    maxSuffixPercentage: z.ZodNumber;
    prefixPercentage: z.ZodNumber;
    transform: z.ZodOptional<z.ZodBoolean>;
    template: z.ZodOptional<z.ZodString>;
    multilineCompletions: z.ZodEnum<["always", "never", "auto"]>;
    slidingWindowPrefixPercentage: z.ZodNumber;
    slidingWindowSize: z.ZodNumber;
    useCache: z.ZodBoolean;
    onlyMyCode: z.ZodBoolean;
    useRecentlyEdited: z.ZodBoolean;
    useImports: z.ZodOptional<z.ZodBoolean>;
    accepted: z.ZodOptional<z.ZodBoolean>;
    time: z.ZodNumber;
    prefix: z.ZodString;
    suffix: z.ZodString;
    prompt: z.ZodString;
    completion: z.ZodString;
    modelProvider: z.ZodString;
    modelName: z.ZodString;
    cacheHit: z.ZodBoolean;
    filepath: z.ZodString;
    gitRepo: z.ZodOptional<z.ZodString>;
    completionId: z.ZodString;
    uniqueId: z.ZodString;
    timestamp: z.ZodNumber;
    completionOptions: z.ZodOptional<z.ZodObject<{
        contextLength: z.ZodOptional<z.ZodNumber>;
        maxTokens: z.ZodOptional<z.ZodNumber>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        minP: z.ZodOptional<z.ZodNumber>;
        presencePenalty: z.ZodOptional<z.ZodNumber>;
        frequencyPenalty: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        n: z.ZodOptional<z.ZodNumber>;
        reasoning: z.ZodOptional<z.ZodBoolean>;
        reasoningBudgetTokens: z.ZodOptional<z.ZodNumber>;
        promptCaching: z.ZodOptional<z.ZodBoolean>;
        stream: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    }, {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    }>>;
    disableInFiles: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}>, "strip", z.ZodTypeAny, {
    time: number;
    disable: boolean;
    maxPromptTokens: number;
    debounceDelay: number;
    maxSuffixPercentage: number;
    prefixPercentage: number;
    onlyMyCode: boolean;
    eventName: string;
    schema: string;
    timestamp: number;
    userId: string;
    userAgent: string;
    selectedProfileId: string;
    useFileSuffix: boolean;
    multilineCompletions: "never" | "always" | "auto";
    slidingWindowPrefixPercentage: number;
    slidingWindowSize: number;
    useCache: boolean;
    useRecentlyEdited: boolean;
    prefix: string;
    suffix: string;
    prompt: string;
    completion: string;
    modelProvider: string;
    modelName: string;
    cacheHit: boolean;
    filepath: string;
    completionId: string;
    uniqueId: string;
    template?: string | undefined;
    transform?: boolean | undefined;
    useImports?: boolean | undefined;
    accepted?: boolean | undefined;
    gitRepo?: string | undefined;
    completionOptions?: {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    disableInFiles?: string[] | undefined;
}, {
    time: number;
    disable: boolean;
    maxPromptTokens: number;
    debounceDelay: number;
    maxSuffixPercentage: number;
    prefixPercentage: number;
    onlyMyCode: boolean;
    eventName: string;
    schema: string;
    timestamp: number;
    userId: string;
    userAgent: string;
    selectedProfileId: string;
    useFileSuffix: boolean;
    multilineCompletions: "never" | "always" | "auto";
    slidingWindowPrefixPercentage: number;
    slidingWindowSize: number;
    useCache: boolean;
    useRecentlyEdited: boolean;
    prefix: string;
    suffix: string;
    prompt: string;
    completion: string;
    modelProvider: string;
    modelName: string;
    cacheHit: boolean;
    filepath: string;
    completionId: string;
    uniqueId: string;
    template?: string | undefined;
    transform?: boolean | undefined;
    useImports?: boolean | undefined;
    accepted?: boolean | undefined;
    gitRepo?: string | undefined;
    completionOptions?: {
        contextLength?: number | undefined;
        maxTokens?: number | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        stop?: string[] | undefined;
        n?: number | undefined;
        reasoning?: boolean | undefined;
        reasoningBudgetTokens?: number | undefined;
        promptCaching?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    disableInFiles?: string[] | undefined;
}>;
