import { z } from "zod";
export declare const toolUsageEventAllSchema: z.ZodObject<z.objectUtil.extendShape<{
    eventName: z.ZodString;
    schema: z.ZodString;
    timestamp: z.ZodString;
    userId: z.ZodString;
    userAgent: z.ZodString;
    selectedProfileId: z.ZodString;
}, {
    toolCallId: z.ZodString;
    functionName: z.ZodString;
    functionParams: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    toolCallArgs: z.ZodString;
    accepted: z.ZodBoolean;
    succeeded: z.ZodBoolean;
    output: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
}>, "strip", z.ZodTypeAny, {
    eventName: string;
    schema: string;
    timestamp: string;
    userId: string;
    userAgent: string;
    selectedProfileId: string;
    accepted: boolean;
    toolCallId: string;
    functionName: string;
    toolCallArgs: string;
    succeeded: boolean;
    functionParams?: Record<string, any> | undefined;
    output?: any[] | undefined;
}, {
    eventName: string;
    schema: string;
    timestamp: string;
    userId: string;
    userAgent: string;
    selectedProfileId: string;
    accepted: boolean;
    toolCallId: string;
    functionName: string;
    toolCallArgs: string;
    succeeded: boolean;
    functionParams?: Record<string, any> | undefined;
    output?: any[] | undefined;
}>;
