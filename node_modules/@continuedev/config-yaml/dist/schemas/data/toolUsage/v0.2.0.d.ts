export declare const toolUsageEventSchema_0_2_0: import("zod").ZodObject<Pick<import("zod").objectUtil.extendShape<{
    eventName: import("zod").ZodString;
    schema: import("zod").ZodString;
    timestamp: import("zod").ZodString;
    userId: import("zod").ZodString;
    userAgent: import("zod").ZodString;
    selectedProfileId: import("zod").ZodString;
}, {
    toolCallId: import("zod").ZodString;
    functionName: import("zod").ZodString;
    functionParams: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodAny>>;
    toolCallArgs: import("zod").ZodString;
    accepted: import("zod").ZodBoolean;
    succeeded: import("zod").ZodBoolean;
    output: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
}>, "eventName" | "schema" | "timestamp" | "userId" | "userAgent" | "selectedProfileId" | "accepted" | "toolCallId" | "functionName" | "functionParams" | "toolCallArgs" | "succeeded" | "output">, "strip", import("zod").ZodTypeAny, {
    eventName: string;
    schema: string;
    timestamp: string;
    userId: string;
    userAgent: string;
    selectedProfileId: string;
    accepted: boolean;
    toolCallId: string;
    functionName: string;
    toolCallArgs: string;
    succeeded: boolean;
    functionParams?: Record<string, any> | undefined;
    output?: any[] | undefined;
}, {
    eventName: string;
    schema: string;
    timestamp: string;
    userId: string;
    userAgent: string;
    selectedProfileId: string;
    accepted: boolean;
    toolCallId: string;
    functionName: string;
    toolCallArgs: string;
    succeeded: boolean;
    functionParams?: Record<string, any> | undefined;
    output?: any[] | undefined;
}>;
export declare const toolUsageEventSchema_0_2_0_noCode: import("zod").ZodObject<Omit<Pick<import("zod").objectUtil.extendShape<{
    eventName: import("zod").ZodString;
    schema: import("zod").ZodString;
    timestamp: import("zod").ZodString;
    userId: import("zod").ZodString;
    userAgent: import("zod").ZodString;
    selectedProfileId: import("zod").ZodString;
}, {
    toolCallId: import("zod").ZodString;
    functionName: import("zod").ZodString;
    functionParams: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodAny>>;
    toolCallArgs: import("zod").ZodString;
    accepted: import("zod").ZodBoolean;
    succeeded: import("zod").ZodBoolean;
    output: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
}>, "eventName" | "schema" | "timestamp" | "userId" | "userAgent" | "selectedProfileId" | "accepted" | "toolCallId" | "functionName" | "functionParams" | "toolCallArgs" | "succeeded" | "output">, "functionParams" | "toolCallArgs" | "output">, "strip", import("zod").ZodTypeAny, {
    eventName: string;
    schema: string;
    timestamp: string;
    userId: string;
    userAgent: string;
    selectedProfileId: string;
    accepted: boolean;
    toolCallId: string;
    functionName: string;
    succeeded: boolean;
}, {
    eventName: string;
    schema: string;
    timestamp: string;
    userId: string;
    userAgent: string;
    selectedProfileId: string;
    accepted: boolean;
    toolCallId: string;
    functionName: string;
    succeeded: boolean;
}>;
